---
#TODO: split into separate ymls?
#TODO: watch all "command" modules containing '|' in the command ->  this should not work according to documentation but does work in testing - if problems detected, try to use shell module instead
- name: define local mqtt queue 
  command: > 
    echo "DEFINE QLOCAL('{{ item.value.queues.mqtt_local.name }}') 
    DESCR('{{ item.value.queues.mqtt_local.description }}') 
    USAGE(XMITQ) 
    MAXDEPTH(100000)"
    | {{ common.mq.directories.onhosts.required.mq_binaries }}runmqsc {{ item.value.name }}
  with_dict: "{{ host.mqvars.qmgrs }}"
  when: >
    (item.value.queues.mqtt_local.name is defined)
    and (item.value.queues.mqtt_local.description is defined)

- name: alter transmission queue manager
  command: > 
    echo \"ALTER QMGR DEFXMITQ('{{ item.value.queues.mqtt_local.name }}')\" 
    | {{ common.mq.directories.onhosts.required.mq_binaries }}runmqsc {{ item.value.name }}
  with_dict: "{{ host.mqvars.qmgrs }}"
  when: (item.value.queues.mqtt_local.name is defined)

- name: install sample MQXR service
  shell: >
    cat \"{{ common.mq.directories.onhosts.required.installation_dir }}mqxr/samples/installMQXRService_unix.mqsc\"
    | {{ common.mq.directories.onhosts.required.mq_binaries }}runmqsc {{ item.value.name }}
  with_dict: "{{ host.mqvars.qmgrs }}"

- name: start MQXR service
  command: >
    echo \"START SERVICE(SYSTEM.MQXR.SERVICE)\" 
    | {{ common.mq.directories.onhosts.required.mq_binaries }}runmqsc {{ item.value.name }}
  with_dict: "{{ host.mqvars.qmgrs }}"
# servicestarts automatically with every QM start

# IMPORTANT NOTE: in the following examplary setup the IBM MQ technical admin user mqm will be authorized to use MQTT service. Based on this, this user is also to be configured in the MQTT client calling MQTT service on the server. For production choose other user than mqm which is authorized to connect to and use MQTT service.


- name: "Set authorization to base topic for user {{ common.mq.user }}"
  command: >
    {{ common.mq.directories.onhosts.required.mq_binaries }}setmqaut 
    -m {{ item.value.name }}
    -t topic
    -n SYSTEM.BASE.TOPIC
    -p {{ common.mq.user }}
    -all +pub +sub
  with_dict: "{{ host.mqvars.qmgrs }}"

#TODO: remove following step or add 'fail' module step
- name: check topic authorization
  command: >
    {{ common.mq.directories.onhosts.required.mq_binaries }}dmpmqcfg
    -m {{ item.value.name }}
    -x authrec
    -o setmqaut
    | grep SYSTEM.BASE.TOPIC
  with_dict: "{{ host.mqvars.qmgrs }}"

- name: Set authorization to MQTT transmit queue for publication to user {{ common.mq.user }}
  command: >
    {{ common.mq.directories.onhosts.required.mq_binaries }}setmqaut 
    -m {{ item.value.name }} 
    -t queue 
    -n SYSTEM.MQTT.TRANSMIT.QUEUE 
    -p {{ common.mq.user }} 
    -all +put
  with_dict: "{{ host.mqvars.qmgrs }}"

#TODO: remove following step or add 'fail' module step
- name: check queue authorization
  command: >
   {{ common.mq.directories.onhosts.required.mq_binaries }}dmpmqcfg
    -m {{ item.value.name }} 
    -x authrec
    -o setmqaut
    | grep SYSTEM.MQTT.TRANSMIT.QUEUE
  with_dict: "{{ host.mqvars.qmgrs }}"